//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Configs/CharacterControllerBindings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PackItUp.InputSystem
{
    public partial class @CharacterControllerBindings: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CharacterControllerBindings()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControllerBindings"",
    ""maps"": [
        {
            ""name"": ""KeyboardLeft"",
            ""id"": ""86e4dea1-c8ba-456c-a35c-edc99091b9ed"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd1aaf22-66ea-429b-9e6c-d50d1e50c4bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""147a4d6f-860c-40a4-abe6-2e6eca11e39a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""2f7182f7-1d00-4c5d-8d1f-19466472492d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""da30b52f-0289-4753-a445-971424a69c4c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70724e00-1f7e-47be-9458-696a871b144e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2feacd37-5ae7-4209-a682-910f85cfb3e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3e185430-2cce-4373-8592-7780ba980bd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4fe82b7-cf00-4c22-a434-eb46fc72f4e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1d39dfe8-a22a-493c-aba7-085a3c861a46"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e19dba2-7f39-4ed4-b95d-7aa3d50b6a87"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardRight"",
            ""id"": ""659e571e-15e2-4577-970b-cd9b92baa349"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""768b0b2c-1202-499c-8923-4a79a61978e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2f080f85-4b72-4c36-bfdc-a1caa84c198f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""a393832b-a592-4f47-a8c6-9d40834f4016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0c819058-de2e-4a2b-b76f-b7aaf21e9c5b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""71ee762a-ded2-4ae0-8cde-f4bd48a9b4aa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f9730997-7f73-43f7-870f-8610b8426d05"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8dcabb9-7adc-4033-a3e7-1ef24215444a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""873b4d01-7cfd-4fc9-a339-796f29c0b71a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ea038950-e37d-454d-8b68-0eb9b891366b"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""463e4550-d0ab-4299-aadb-5a6822801388"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // KeyboardLeft
            m_KeyboardLeft = asset.FindActionMap("KeyboardLeft", throwIfNotFound: true);
            m_KeyboardLeft_Move = m_KeyboardLeft.FindAction("Move", throwIfNotFound: true);
            m_KeyboardLeft_Dash = m_KeyboardLeft.FindAction("Dash", throwIfNotFound: true);
            m_KeyboardLeft_Exit = m_KeyboardLeft.FindAction("Exit", throwIfNotFound: true);
            // KeyboardRight
            m_KeyboardRight = asset.FindActionMap("KeyboardRight", throwIfNotFound: true);
            m_KeyboardRight_Move = m_KeyboardRight.FindAction("Move", throwIfNotFound: true);
            m_KeyboardRight_Dash = m_KeyboardRight.FindAction("Dash", throwIfNotFound: true);
            m_KeyboardRight_Exit = m_KeyboardRight.FindAction("Exit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // KeyboardLeft
        private readonly InputActionMap m_KeyboardLeft;
        private List<IKeyboardLeftActions> m_KeyboardLeftActionsCallbackInterfaces = new List<IKeyboardLeftActions>();
        private readonly InputAction m_KeyboardLeft_Move;
        private readonly InputAction m_KeyboardLeft_Dash;
        private readonly InputAction m_KeyboardLeft_Exit;
        public struct KeyboardLeftActions
        {
            private @CharacterControllerBindings m_Wrapper;
            public KeyboardLeftActions(@CharacterControllerBindings wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_KeyboardLeft_Move;
            public InputAction @Dash => m_Wrapper.m_KeyboardLeft_Dash;
            public InputAction @Exit => m_Wrapper.m_KeyboardLeft_Exit;
            public InputActionMap Get() { return m_Wrapper.m_KeyboardLeft; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardLeftActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardLeftActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardLeftActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardLeftActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }

            private void UnregisterCallbacks(IKeyboardLeftActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @Exit.started -= instance.OnExit;
                @Exit.performed -= instance.OnExit;
                @Exit.canceled -= instance.OnExit;
            }

            public void RemoveCallbacks(IKeyboardLeftActions instance)
            {
                if (m_Wrapper.m_KeyboardLeftActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardLeftActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardLeftActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardLeftActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardLeftActions @KeyboardLeft => new KeyboardLeftActions(this);

        // KeyboardRight
        private readonly InputActionMap m_KeyboardRight;
        private List<IKeyboardRightActions> m_KeyboardRightActionsCallbackInterfaces = new List<IKeyboardRightActions>();
        private readonly InputAction m_KeyboardRight_Move;
        private readonly InputAction m_KeyboardRight_Dash;
        private readonly InputAction m_KeyboardRight_Exit;
        public struct KeyboardRightActions
        {
            private @CharacterControllerBindings m_Wrapper;
            public KeyboardRightActions(@CharacterControllerBindings wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_KeyboardRight_Move;
            public InputAction @Dash => m_Wrapper.m_KeyboardRight_Dash;
            public InputAction @Exit => m_Wrapper.m_KeyboardRight_Exit;
            public InputActionMap Get() { return m_Wrapper.m_KeyboardRight; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardRightActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardRightActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardRightActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardRightActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }

            private void UnregisterCallbacks(IKeyboardRightActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @Exit.started -= instance.OnExit;
                @Exit.performed -= instance.OnExit;
                @Exit.canceled -= instance.OnExit;
            }

            public void RemoveCallbacks(IKeyboardRightActions instance)
            {
                if (m_Wrapper.m_KeyboardRightActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardRightActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardRightActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardRightActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardRightActions @KeyboardRight => new KeyboardRightActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IKeyboardLeftActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnExit(InputAction.CallbackContext context);
        }
        public interface IKeyboardRightActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnExit(InputAction.CallbackContext context);
        }
    }
}
